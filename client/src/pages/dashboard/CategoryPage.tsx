import React, { useEffect, useState } from "react";
import {
  Table,
  Button,
  Tag,
  Space,
  Select,
  Input,
  Modal,
  Form,
  message,
  Radio,
} from "antd";
import { PlusOutlined, DeleteOutlined, EditOutlined } from "@ant-design/icons";
import { Typography } from "antd";
import { useDispatch, useSelector } from "react-redux";
import type { AppDispatch } from "../../stores/stores";
import {
  addCategory,
  getAllCategory,
  updateCategory,
  deleteCategory,
} from "../../stores/slices/CategorySlice";

const { Text } = Typography;
const { Option } = Select;
const { Search } = Input;

export default function CategoryPage() {
  const dispatch = useDispatch<AppDispatch>();
  const { categories, loading, error } = useSelector(
    (state: any) => state.category
  );

  const [filteredData, setFilteredData] = useState<any[]>([]);
  const [statusFilter, setStatusFilter] = useState("all");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingCategory, setEditingCategory] = useState<any>(null);
  const [form] = Form.useForm();

  // üîπ L·∫•y d·ªØ li·ªáu khi load
  useEffect(() => {
    dispatch(getAllCategory());
  }, [dispatch]);

  // üîπ Khi categories thay ƒë·ªïi ‚Üí c·∫≠p nh·∫≠t b·∫£ng
  useEffect(() => {
    setFilteredData(categories);
  }, [categories]);

  // üîπ Hi·ªÉn th·ªã l·ªói n·∫øu c√≥
  useEffect(() => {
    if (error) message.error(error);
  }, [error]);

  // ======== C·ªôt b·∫£ng ========
  const columns = [
    {
      title: <span className="text-gray-700">M√£ danh m·ª•c</span>,
      dataIndex: "code",
      sorter: (a: any, b: any) => a.code.localeCompare(b.code),
      render: (text: string) => <Text strong>{text}</Text>,
    },
    {
      title: <span className="text-gray-700">T√™n danh m·ª•c</span>,
      dataIndex: "name",
      sorter: (a: any, b: any) => a.name.localeCompare(b.name),
      render: (text: string) => <Text strong>{text}</Text>,
    },
    {
      title: <span className="text-gray-700">Tr·∫°ng th√°i</span>,
      dataIndex: "status",
      render: (s: string) =>
        s === "active" ? (
          <Tag color="green" className="px-2 py-1 rounded-full">
            <span className="inline-block w-2 h-2 bg-green-500 rounded-full mr-2"></span>
            ƒêang ho·∫°t ƒë·ªông
          </Tag>
        ) : (
          <Tag color="red" className="px-2 py-1 rounded-full">
            <span className="inline-block w-2 h-2 bg-red-500 rounded-full mr-2"></span>
            Ng·ª´ng ho·∫°t ƒë·ªông
          </Tag>
        ),
    },
    {
      title: <span className="text-gray-700">Ch·ª©c nƒÉng</span>,
      render: (record: any) => (
        <Space>
          <Button
            type="text"
            danger
            icon={<DeleteOutlined />}
            onClick={() => handleDelete(record)}
          />
          <Button
            type="text"
            style={{ color: "#facc15" }}
            icon={<EditOutlined />}
            onClick={() => handleEdit(record)}
          />
        </Space>
      ),
    },
  ];

  // ======== L·ªçc theo tr·∫°ng th√°i ========
  const handleStatusChange = (value: string) => {
    setStatusFilter(value);
    if (value === "all") {
      setFilteredData(categories);
    } else {
      setFilteredData(categories.filter((d: any) => d.status === value));
    }
  };

  // ======== T√¨m ki·∫øm ========
  const onSearch = (value: string) => {
    const searchData = categories.filter((d: any) =>
      d.name.toLowerCase().includes(value.toLowerCase())
    );
    setFilteredData(
      statusFilter === "all"
        ? searchData
        : searchData.filter((d: any) => d.status === statusFilter)
    );
  };

  // ======== M·ªü modal th√™m ========
  const handleOpenAdd = () => {
    setEditingCategory(null);
    form.resetFields();
    setIsModalOpen(true);
  };

  // ======== M·ªü modal s·ª≠a ========
  const handleEdit = (record: any) => {
    setEditingCategory(record);
    form.setFieldsValue(record);
    setIsModalOpen(true);
  };

  // ======== L∆∞u (Th√™m ho·∫∑c C·∫≠p nh·∫≠t) ========
  const handleSave = async () => {
    try {
      const values = await form.validateFields();

      if (editingCategory) {
        const updatedCategory = { ...editingCategory, ...values };

        await dispatch(updateCategory(updatedCategory));
        await dispatch(getAllCategory()); // refresh l·∫°i
        message.success("C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng!");
      } else {
        // Th√™m m·ªõi ‚Üí G·ªçi API th·∫≠t
        if (filteredData.some((d) => d.code === values.code)) {
          message.error("M√£ danh m·ª•c ƒë√£ t·ªìn t·∫°i!");
          return;
        }

        await dispatch(addCategory(values)); // üü¢ G·ªåI API POST t·ªõi db.json
        await dispatch(getAllCategory()); // üîÅ Refresh l·∫°i list
        message.success("Th√™m danh m·ª•c th√†nh c√¥ng!");
      }

      setIsModalOpen(false);
      form.resetFields();
      setEditingCategory(null);
    } catch (err) {
      console.error(err);
      message.error("L∆∞u danh m·ª•c th·∫•t b·∫°i!");
    }
  };
const handleDelete = async (id: number) => {
  const confirmDelete = window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° danh m·ª•c n√†y?");
  if (confirmDelete) {
    try {
      await dispatch(deleteCategory(id));
      await dispatch(getAllCategory());
      message.success("Xo√° danh m·ª•c th√†nh c√¥ng!");
    } catch (error) {
      console.log(error);
      message.error("Xo√° th·∫•t b·∫°i!");
    }
  }
};


  return (
    <>
      {/* H√†ng 1 */}
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold">Danh m·ª•c</h1>
        <Button type="primary" icon={<PlusOutlined />} onClick={handleOpenAdd}>
          Th√™m m·ªõi danh m·ª•c
        </Button>
      </div>

      {/* H√†ng 2 */}
      <div className="flex justify-end items-center gap-2 mb-4">
        <Select
          defaultValue="all"
          className="w-40"
          onChange={handleStatusChange}
        >
          <Option value="all">T·∫•t c·∫£</Option>
          <Option value="active">ƒêang ho·∫°t ƒë·ªông</Option>
          <Option value="inactive">Ng·ª´ng ho·∫°t ƒë·ªông</Option>
        </Select>

        <Search
          placeholder="T√¨m ki·∫øm danh m·ª•c theo t√™n"
          onSearch={onSearch}
          allowClear
          className="!w-72"
        />
      </div>

      {/* B·∫£ng */}
      <Table
        columns={columns}
        dataSource={filteredData}
        loading={loading}
        pagination={{ pageSize: 8, position: ["bottomCenter"] }}
        rowKey="code"
      />

      {/* Modal (Th√™m / C·∫≠p nh·∫≠t) */}
      <Modal
        title={
          <h3 className="font-semibold text-lg">
            {editingCategory ? "C·∫≠p nh·∫≠t danh m·ª•c" : "Th√™m m·ªõi danh m·ª•c"}
          </h3>
        }
        open={isModalOpen}
        onCancel={() => {
          setIsModalOpen(false);
          form.resetFields();
          setEditingCategory(null);
        }}
        footer={null}
        centered
      >
        <Form form={form} layout="vertical">
          <Form.Item
            name="code"
            label="M√£ danh m·ª•c"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m√£ danh m·ª•c" }]}
          >
            <Input
              placeholder="Nh·∫≠p m√£ danh m·ª•c"
              disabled={!!editingCategory}
            />
          </Form.Item>

          <Form.Item
            name="name"
            label="T√™n danh m·ª•c"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n danh m·ª•c" }]}
          >
            <Input placeholder="Nh·∫≠p t√™n danh m·ª•c" />
          </Form.Item>

          <Form.Item
            name="status"
            label="Tr·∫°ng th√°i"
            initialValue="active"
            rules={[{ required: true, message: "Vui l√≤ng ch·ªçn tr·∫°ng th√°i" }]}
          >
            <Radio.Group>
              <Radio value="active">ƒêang ho·∫°t ƒë·ªông</Radio>
              <Radio value="inactive">Ng·ª´ng ho·∫°t ƒë·ªông</Radio>
            </Radio.Group>
          </Form.Item>

          <div className="flex justify-end gap-2 mt-4">
            <Button
              onClick={() => {
                setIsModalOpen(false);
                form.resetFields();
                setEditingCategory(null);
              }}
            >
              H·ªßy
            </Button>
            <Button type="primary" onClick={handleSave}>
              {editingCategory ? "C·∫≠p nh·∫≠t" : "Th√™m"}
            </Button>
          </div>
        </Form>
      </Modal>
    </>
  );
}
